# アプリケーション設定
spring.application.name=task-management-app
server.port=8080

# データベース設定（開発環境はH2、本番はPostgreSQL）
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# H2コンソール有効化（開発環境のみ）
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA設定
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# CORS設定（開発環境用）
app.cors.allowed-origins=http://localhost:5173

# Gemini API設定（環境変数から読み込み）
gemini.api.key=${GEMINI_API_KEY:dummy-key-for-development}
gemini.api.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent

# JWT設定
# jwt.secret: JWTトークンの署名に使用するシークレットキー
# - 開発環境：デフォルト値を使用（環境変数JWT_SECRETが未設定の場合）
# - 本番環境：必ず環境変数JWT_SECRETを設定してください
# - シークレットキーは、最低32文字以上を推奨します
# - 実務では、ランダムな文字列を生成して使用してください
jwt.secret=${JWT_SECRET:my-secret-key-for-development-please-change-in-production-environment-12345678}

# jwt.expiration: JWTトークンの有効期限（ミリ秒）
# - 86400000ミリ秒 = 24時間
# - 実務では、1時間（3600000）〜24時間程度が一般的です
# - セキュリティとユーザビリティのバランスを考慮して設定してください
jwt.expiration=86400000